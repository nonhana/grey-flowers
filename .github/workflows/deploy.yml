name: Build & Deploy Nuxt to VPS

on:
  push:
    branches: [ master ]

concurrency:
  group: prod-deploy
  cancel-in-progress: false   # 串行部署，避免并发踩环境

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: nuxt-output
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (20.x) and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable pnpm via corepack
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
          pnpm --version

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Pack artifact
        run: |
          tar -czf output.tar.gz \
            .output \
            package.json \
            pnpm-lock.yaml \
            prisma \
            ecosystem.config.cjs

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuxt-output
          path: output.tar.gz
          retention-days: 3

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: nuxt-output

      - name: Copy artifact to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          password: ${{ secrets.VPS_PASSWORD }}
          source: "output.tar.gz"
          target: "${{ secrets.APP_DIR }}"

      - name: SSH deploy on VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          password: ${{ secrets.VPS_PASSWORD }}
          script_stop: true
          script: |
            set -Eeuo pipefail

            cd ${{ secrets.APP_DIR }}

            echo "[1/6] Unpack artifact"
            tar -xzf output.tar.gz

            echo "[3/6] Install production deps"
            pnpm install --frozen-lockfile --prod

            echo "[4/6] Prisma generate (on VPS, uses .env DATABASE_URL)"
            pnpm dlx prisma generate --schema=prisma/schema.prisma

            echo "✅ Deploy done"
