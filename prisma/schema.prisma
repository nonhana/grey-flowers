// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("HANA_DATABASE_URL")
}

model Article {
  id          Int       @id @default(autoincrement())
  to          String    @unique
  title       String    @unique
  description String?
  cover       String?
  alt         String    @unique
  ogImage     String?
  publishedAt DateTime  @default(now())
  editedAt    DateTime  @updatedAt
  published   Boolean   @default(false)
  wordCount   Int       @default(0)
  tags        Tag[]     @relation("ArticleTags")
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model Tag {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  articleCount Int       @default(0)
  articles     Article[] @relation("ArticleTags")
}

model Category {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  cover        String?
  articleCount Int       @default(0)
  articles     Article[]
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  username    String        @unique
  password    String
  site        String?
  avatar      String
  comments    Comment[]
  replies     Comment[]     @relation("ReplyToUser")
  messages    Message[]
  userMessage UserMessage[]
}

model Comment {
  id               Int           @id @default(autoincrement())
  path             String
  content          String
  level            CommentLevel  @default(PARENT)
  author           User          @relation(fields: [authorId], references: [id])
  authorId         Int
  parent           Comment?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId         Int?
  children         Comment[]     @relation("ParentChild")
  replyToUser      User?         @relation("ReplyToUser", fields: [replyToUserId], references: [id])
  replyToUserId    Int?
  replyToComment   Comment?      @relation("ReplyToComment", fields: [replyToCommentId], references: [id])
  replyToCommentId Int?
  replies          Comment[]     @relation("ReplyToComment")
  publishedAt      DateTime      @default(now())
  editedAt         DateTime      @updatedAt
  userMessage      UserMessage[]
}

model Message {
  id          Int       @id @default(autoincrement())
  content     String
  parent      Message?  @relation("ParentChild", fields: [parentId], references: [id])
  parentId    Int?
  children    Message[] @relation("ParentChild")
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  publishedAt DateTime  @default(now())
  editedAt    DateTime  @updatedAt
}

model UserMessage {
  id         Int     @id @default(autoincrement())
  receiver   User    @relation(fields: [receiverId], references: [id])
  receiverId Int
  comment    Comment @relation(fields: [commentId], references: [id])
  commentId  Int
}

model Activity {
  id          Int      @id @default(autoincrement())
  title       String
  content     String   @default("")
  images      String[] @default([])
  music       Music[]
  publishedAt DateTime @default(now())
  editedAt    DateTime @updatedAt
}

model Music {
  id         Int       @id @default(autoincrement())
  title      String
  src        String
  seconds    Int
  albumId    Int?
  album      Album?    @relation(fields: [albumId], references: [id])
  activityId Int?
  activity   Activity? @relation(fields: [activityId], references: [id])
}

model Album {
  id          Int     @id @default(autoincrement())
  title       String
  cover       String
  description String?
  music       Music[]
}

enum CommentLevel {
  PARENT
  CHILD
}
